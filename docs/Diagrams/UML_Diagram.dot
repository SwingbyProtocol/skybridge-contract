
digraph UmlClassDiagram {
rankdir=BT
color=black
arrowhead=open
node [shape=record, style=filled, fillcolor=gray95]
subgraph  graph_0 {
label="contracts"
0 [label="{BurnableToken| Private:\l\ \ \ balances: mapping\(address=\>uint256\)\l\ \ \ allowances: mapping\(address=\>mapping\(address=\>uint256\)\)\l\ \ \ tokenTotalSupply: uint256\l\ \ \ tokenName: string\l\ \ \ tokenSymbol: string\l\ \ \ tokenDecimals: uint8\l\ \ \ isMintable: bool\l| Internal:\l\ \ \ \ _initialize(_name: string, _symbol: string, _decimals: uint8, _amount: uint256, _mintable: bool)\l\ \ \ \ _transfer(sender: address, recipient: address, amount: uint256)\l\ \ \ \ _mint(account: address, amount: uint256)\l\ \ \ \ _burn(account: address, amount: uint256)\l\ \ \ \ _approve(owner: address, spender: address, amount: uint256)\l\ \ \ \ _burnFrom(account: address, amount: uint256)\lPublic:\l\ \ \ \ transfer(recipient: address, amount: uint256): bool\l\ \ \ \ mintable(): bool\l\ \ \ \ symbol(): string\l\ \ \ \ name(): string\l\ \ \ \ getOwner(): address\l\ \ \ \ totalSupply(): uint256\l\ \ \ \ balanceOf(account: address): uint256\l\ \ \ \ decimals(): uint8\l\ \ \ \ allowance(owner: address, spender: address): uint256\l\ \ \ \ approve(spender: address, amount: uint256): bool\l\ \ \ \ transferFrom(sender: address, recipient: address, amount: uint256): bool\l\ \ \ \ increaseAllowance(spender: address, addedValue: uint256): bool\l\ \ \ \ decreaseAllowance(spender: address, subtractedValue: uint256): bool\l\ \ \ \ mint(target: address, amount: uint256): bool\l\ \ \ \ burn(amount: uint256): bool\l}"]
1 [label="{LPToken| | Public:\l\ \ \ \ constructor(_decimals: uint8)\l}"]
2 [label="{Migrations| Public:\l\ \ \ owner: address\l\ \ \ last_completed_migration: uint256\l| Public:\l\ \ \ \ \<\<modifier\>\> restricted()\l\ \ \ \ setCompleted(completed: uint256)\l}"]
3 [label="{SwapContract| Private:\l\ \ \ swapCount: uint256\l\ \ \ latestRemovedIndex: uint256\l\ \ \ convertScale: uint256\l\ \ \ lpDecimals: uint256\l\ \ \ floatAmountOf: mapping\(address=\>uint256\)\l\ \ \ used: mapping\(bytes32=\>bool\)\l\ \ \ nodes: mapping\(address=\>bytes32\)\l\ \ \ isInList: mapping\(address=\>bool\)\l\ \ \ nodeAddrs: address[]\lPublic:\l\ \ \ expirationTime: uint256\l\ \ \ spPendingTXs: mapping\(uint256=\>spPendingTx\)\l\ \ \ whitelist: mapping\(address=\>bool\)\l\ \ \ BTCT_ADDR: address\l\ \ \ lpToken: address\l\ \ \ churnedInCount: uint8\l\ \ \ tssThreshold: uint8\l\ \ \ nodeRewardsRatio: uint8\l\ \ \ depositFeesBPS: uint8\l\ \ \ withdrawalFeeBPS: uint8\l\ \ \ lockedLPTokensForNode: uint256\l\ \ \ feesLPTokensForNode: uint256\l\ \ \ initialExchangeRate: uint256\l\ \ \ tokens: mapping\(address=\>mapping\(address=\>uint256\)\)\l\ \ \ ETHER: address\l\ \ \ paraswapAddress: address\l\ \ \ wETH: address\l| Internal:\l\ \ \ \ _removeFloat(_token: address, _amount: uint256)\l\ \ \ \ _doParaSwap(_data: Utils.SimpleData)\l\ \ \ \ _setExpirationTime(_expirationTime: uint256)\l\ \ \ \ _spCleanUpOldTXs()\l\ \ \ \ _issueLPTokensForFloat(_token: address, _transaction: bytes32, _zerofee: bool, _txid: bytes32): bool\l\ \ \ \ _burnLPTokensForFloat(_token: address, _transaction: bytes32, _minerFee: uint256, _txid: bytes32): bool\l\ \ \ \ _checkFlips(_token: address, _amountOfFloat: uint256): uint8\l\ \ \ \ _addFloat(_token: address, _amount: uint256)\l\ \ \ \ _spRecordPendingTx(_destinationAddressForBTC: bytes32, _btctAmount: uint256)\l\ \ \ \ _swap(_sourceToken: address, _destToken: address, _swapAmount: uint256)\l\ \ \ \ _safeTransfer(_token: address, _to: address, _amount: uint256)\l\ \ \ \ _rewardsCollection(_feesToken: address, _rewardsAmount: uint256)\l\ \ \ \ _addUsedTx(_txid: bytes32)\l\ \ \ \ _addUsedTxs(_txids: bytes32[])\l\ \ \ \ _addNode(_addr: address, _data: bytes32, _remove: bool): bool\l\ \ \ \ _splitToValues(_data: bytes32): (address, uint256)\lExternal:\l\ \ \ \ \<\<payable\>\> spParaSwapBTC2Token(_data: Utils.SimpleData)\l\ \ \ \ \<\<payable\>\> spDeposit(_token: address, _amount: uint256)\l\ \ \ \ \<\<payable\>\> redeemEther(_amount: uint256)\l\ \ \ \ \<\<payable\>\> null()\l\ \ \ \ spParaSwapToken2BTC(_destinationAddressForBTC: bytes32, _data: Utils.SimpleData)\l\ \ \ \ distributeNodeRewards(): bool\l\ \ \ \ recordSkyPoolsTX(_destToken: address, _to: address, _amount: uint256, _totalSwapped: uint256, _redeemedFloatTxIds: bytes32[]): bool\l\ \ \ \ singleTransferERC20(_destToken: address, _to: address, _amount: uint256, _totalSwapped: uint256, _rewardsAmount: uint256, _redeemedFloatTxIds: bytes32[]): bool\l\ \ \ \ multiTransferERC20TightlyPacked(_destToken: address, _addressesAndAmounts: bytes32[], _totalSwapped: uint256, _rewardsAmount: uint256, _redeemedFloatTxIds: bytes32[]): bool\l\ \ \ \ spGetPendingSwaps(): (data: spPendingTx[])\l\ \ \ \ spCleanUpOldTXs(_loopCount: uint256)\l\ \ \ \ collectSwapFeesForBTC(_destToken: address, _incomingAmount: uint256, _minerFee: uint256, _rewardsAmount: uint256): bool\l\ \ \ \ recordIncomingFloat(_token: address, _addressesAndAmountOfFloat: bytes32, _zerofee: bool, _txid: bytes32): bool\l\ \ \ \ recordOutcomingFloat(_token: address, _addressesAndAmountOfLPtoken: bytes32, _minerFee: uint256, _txid: bytes32): bool\l\ \ \ \ redeemERC20Token(_token: address, _amount: uint256)\l\ \ \ \ churn(_newOwner: address, _rewardAddressAndAmounts: bytes32[], _isRemoved: bool[], _churnedInCount: uint8, _tssThreshold: uint8, _nodeRewardsRatio: uint8, _withdrawalFeeBPS: uint8, _expirationTime: uint256): bool\l\ \ \ \ null()\lPublic:\l\ \ \ \ \<\<event\>\> Swap(from: address, to: address, amount: uint256)\l\ \ \ \ \<\<event\>\> Deposit(token: address, user: address, amount: uint256, balance: uint256, Timestamp: uint256)\l\ \ \ \ \<\<event\>\> RewardsCollection(feesToken: address, rewards: uint256, amountLPTokensForNode: uint256, currentPriceLP: uint256)\l\ \ \ \ \<\<event\>\> IssueLPTokensForFloat(to: address, amountOfFloat: uint256, amountOfLP: uint256, currentPriceLP: uint256, depositFees: uint256, txid: bytes32)\l\ \ \ \ \<\<event\>\> BurnLPTokensForFloat(token: address, amountOfLP: uint256, amountOfFloat: uint256, currentPriceLP: uint256, withdrawal: uint256, txid: bytes32)\l\ \ \ \ \<\<event\>\> SwapTokensToBTC(SwapID: bytes32, DestAddr: bytes32, RefundAddr: address, AmountWBTC: uint256, Timestamp: uint256)\l\ \ \ \ \<\<event\>\> SetExpirationTime(ExpirationTime: uint256, Timestamp: uint256)\l\ \ \ \ \<\<event\>\> DistributeNodeRewards(rewardLPTsForNodes: uint256)\l\ \ \ \ \<\<event\>\> Withdraw(token: address, user: address, amount: uint256, balance: uint256, Timestamp: uint256)\l\ \ \ \ \<\<modifier\>\> priceCheck()\l\ \ \ \ constructor(_lpToken: address, _btct: address, _wETH: address, _existingBTCFloat: uint256)\l\ \ \ \ balanceOf(_token: address, _user: address): uint256\l\ \ \ \ recordUTXOSweepMinerFee(_minerFee: uint256, _txid: bytes32): bool\l\ \ \ \ isTxUsed(_txid: bytes32): bool\l\ \ \ \ getCurrentPriceLP(): (nowPrice: uint256)\l\ \ \ \ getDepositFeeRate(_token: address, _amountOfFloat: uint256): (depositFeeRate: uint256)\l\ \ \ \ getFloatReserve(_tokenA: address, _tokenB: address): (reserveA: uint256, reserveB: uint256)\l\ \ \ \ getActiveNodes(): bytes32[]\l}"]
"3struct0" [label="{\<\<struct\>\>\nspPendingTx|SwapID: bytes32\lDestAddr: bytes32\lRefundAddr: address\lAmountWBTC: uint256\lTimestamp: uint256\l}"]
"3struct0" -> 3 [arrowhead=diamond, weight=3]
4 [label="{SwapContractFactory| | External:\l\ \ \ \ deployNewContracts(_owner: address, _wbtc: address, _wETH: address, _decimals: uint8, _existingBTCFloat: uint256): address\l\ \ \ \ null()\lPublic:\l\ \ \ \ \<\<event\>\> Deployed(lpToken: address, swapContract: address)\l}"]
5 [label="{SwingbyToken| | Public:\l\ \ \ \ constructor()\l}"]
}
subgraph  graph_1 {
label="contracts/interfaces"
6 [label="{\<\<Interface\>\>\nIAugustusSwapper| | External:\l\ \ \ \  buy(data: BuyData): uint256\l\ \ \ \  getPartnerRegistry(): address\l\ \ \ \  getFeeWallet(): address\l\ \ \ \  getTokenTransferProxy(): address\l\ \ \ \  getUniswapProxy(): address\l\ \ \ \  getVersion(): string\l\ \ \ \  multiSwap(data: SellData): uint256\l\ \ \ \  getWhitelistAddress(): address\l\ \ \ \  swapOnUniswap(amountIn: uint256, amountOutMin: uint256, path: address[], referrer: uint8)\l\ \ \ \  buyOnUniswap(amountInMax: uint256, amountOut: uint256, path: address[], referrer: uint8)\l\ \ \ \  buyOnUniswapFork(factory: address, initCode: bytes32, amountInMax: uint256, amountOut: uint256, path: address[], referrer: uint8)\l\ \ \ \  swapOnUniswapFork(factory: address, initCode: bytes32, amountIn: uint256, amountOutMin: uint256, path: address[], referrer: uint8)\l\ \ \ \  simplBuy(fromToken: address, toToken: address, fromAmount: uint256, toAmount: uint256, callees: address[], exchangeData: bytes, startIndexes: uint256[], values: uint256[], beneficiary: address, referrer: string, useReduxToken: bool)\l\ \ \ \  simpleSwap(fromToken: address, toToken: address, fromAmount: uint256, toAmount: uint256, expectedAmount: uint256, callees: address[], exchangeData: bytes, startIndexes: uint256[], values: uint256[], beneficiary: address, referrer: string, useReduxToken: bool): (receivedAmount: uint256)\l\ \ \ \  megaSwap(data: MegaSwapSellData): uint256\l}"]
"6struct0" [label="{\<\<struct\>\>\nSellData|fromToken: address\lfromAmount: uint256\ltoAmount: uint256\lexpectedAmount: uint256\lbeneficiary: address\lreferrer: string\luseReduxToken: bool\lpath: Path[]\l}"]
"6struct0" -> 6 [arrowhead=diamond, weight=3]
"6struct1" [label="{\<\<struct\>\>\nMegaSwapSellData|fromToken: address\lfromAmount: uint256\ltoAmount: uint256\lexpectedAmount: uint256\lbeneficiary: address\lreferrer: string\luseReduxToken: bool\lpath: MegaSwapPath[]\l}"]
"6struct1" -> 6 [arrowhead=diamond, weight=3]
"6struct2" [label="{\<\<struct\>\>\nBuyData|fromToken: address\ltoToken: address\lfromAmount: uint256\ltoAmount: uint256\lbeneficiary: address\lreferrer: string\luseReduxToken: bool\lroute: BuyRoute[]\l}"]
"6struct2" -> 6 [arrowhead=diamond, weight=3]
"6struct3" [label="{\<\<struct\>\>\nRoute|exchange: address\ltargetExchange: address\lpercent: uint\lpayload: bytes\lnetworkFee: uint256\l}"]
"6struct3" -> 6 [arrowhead=diamond, weight=3]
"6struct4" [label="{\<\<struct\>\>\nMegaSwapPath|fromAmountPercent: uint256\lpath: Path[]\l}"]
"6struct4" -> 6 [arrowhead=diamond, weight=3]
"6struct5" [label="{\<\<struct\>\>\nPath|to: address\ltotalNetworkFee: uint256\lroutes: Route[]\l}"]
"6struct5" -> 6 [arrowhead=diamond, weight=3]
"6struct6" [label="{\<\<struct\>\>\nBuyRoute|exchange: address\ltargetExchange: address\lfromAmount: uint256\ltoAmount: uint256\lpayload: bytes\lnetworkFee: uint256\l}"]
"6struct6" -> 6 [arrowhead=diamond, weight=3]
7 [label="{\<\<Interface\>\>\nIBurnableToken| | External:\l\ \ \ \  mint(target: address, amount: uint256): bool\l\ \ \ \  burn(amount: uint256): bool\l\ \ \ \  mintable(): bool\l}"]
8 [label="{\<\<Interface\>\>\nIERC20| | External:\l\ \ \ \  totalSupply(): uint256\l\ \ \ \  decimals(): uint8\l\ \ \ \  symbol(): string\l\ \ \ \  name(): string\l\ \ \ \  getOwner(): address\l\ \ \ \  balanceOf(account: address): uint256\l\ \ \ \  transfer(recipient: address, amount: uint256): bool\l\ \ \ \  allowance(_owner: address, spender: address): uint256\l\ \ \ \  approve(spender: address, amount: uint256): bool\l\ \ \ \  transferFrom(sender: address, recipient: address, amount: uint256): bool\lPublic:\l\ \ \ \ \<\<event\>\> Transfer(from: address, to: address, value: uint256)\l\ \ \ \ \<\<event\>\> Approval(owner: address, spender: address, value: uint256)\l}"]
9 [label="{\<\<Interface\>\>\nIParaswap| | External:\l\ \ \ \  swapOnUniswap(amountIn: uint256, amountOutMin: uint256, path: address[])\l\ \ \ \  multiSwap(data: Utils.SellData): uint256\l\ \ \ \  protectedMultiSwap(data: Utils.SellData): uint256\l\ \ \ \  protectedMegaSwap(data: Utils.MegaSwapSellData): uint256\l\ \ \ \  protectedSimpleSwap(data: Utils.SimpleData): (receivedAmount: uint256)\l\ \ \ \  protectedSimpleBuy(data: Utils.SimpleData)\l\ \ \ \  simpleSwap(data: Utils.SimpleData): (receivedAmount: uint256)\l\ \ \ \  simpleBuy(data: Utils.SimpleData)\l\ \ \ \  megaSwap(data: Utils.MegaSwapSellData): uint256\l\ \ \ \  swapOnUniswapFork(factory: address, initCode: bytes32, amountIn: uint256, amountOutMin: uint256, path: address[])\l\ \ \ \  buyOnUniswap(amountInMax: uint256, amountOut: uint256, path: address[])\l\ \ \ \  buyOnUniswapFork(factory: address, initCode: bytes32, amountInMax: uint256, amountOut: uint256, path: address[])\l\ \ \ \  swapOnUniswapV2Fork(tokenIn: address, amountIn: uint256, amountOutMin: uint256, weth: address, pools: uint256[])\l\ \ \ \  buyOnUniswapV2Fork(tokenIn: address, amountInMax: uint256, amountOut: uint256, weth: address, pools: uint256[])\l\ \ \ \  swapOnZeroXv2(fromToken: IERC20, toToken: IERC20, fromAmount: uint256, amountOutMin: uint256, exchange: address, payload: bytes)\l\ \ \ \  swapOnZeroXv4(fromToken: IERC20, toToken: IERC20, fromAmount: uint256, amountOutMin: uint256, exchange: address, payload: bytes)\l}"]
10 [label="{\<\<Interface\>\>\nISwapContract| | External:\l\ \ \ \  recordUTXOSweepMinerFee(_minerFee: uint256, _txid: bytes32): bool\l\ \ \ \  singleTransferERC20(_destToken: address, _to: address, _amount: uint256, _totalSwapped: uint256, _rewardsAmount: uint256, _redeemedFloatTxIds: bytes32[]): bool\l\ \ \ \  collectSwapFeesForBTC(_destToken: address, _incomingAmount: uint256, _minerFee: uint256, _rewardsAmount: uint256): bool\l\ \ \ \  recordIncomingFloat(_token: address, _addressesAndAmountOfFloat: bytes32, _zerofee: bool, _txid: bytes32): bool\l\ \ \ \  recordOutcomingFloat(_token: address, _addressesAndAmountOfLPtoken: bytes32, _minerFee: uint256, _txid: bytes32): bool\l\ \ \ \  distributeNodeRewards(): bool\l\ \ \ \  multiTransferERC20TightlyPacked(_destToken: address, _addressesAndAmounts: bytes32[], _totalSwapped: uint256, _rewardsAmount: uint256, _redeemedFloatTxIds: bytes32[]): bool\l\ \ \ \  churn(_newOwner: address, _rewardAddressAndAmounts: bytes32[], _isRemoved: bool[], _churnedInCount: uint8, _tssThreshold: uint8, _nodeRewardsRatio: uint8, _withdrawalFeeBPS: uint8, _expirationTime: uint256): bool\l\ \ \ \  isTxUsed(_txid: bytes32): bool\l\ \ \ \  getCurrentPriceLP(): uint256\l\ \ \ \  getDepositFeeRate(_token: address, _amountOfFloat: uint256): uint256\l\ \ \ \  getFloatReserve(_tokenA: address, _tokenB: address): (reserveA: uint256, reserveB: uint256)\l\ \ \ \  getActiveNodes(): bytes32[]\l}"]
11 [label="{\<\<Interface\>\>\nITokenTransferProxy| | External:\l\ \ \ \  transferFrom(token: address, from: address, to: address, amount: uint256)\l\ \ \ \  freeReduxTokens(user: address, tokensToFree: uint256)\l}"]
12 [label="{\<\<Interface\>\>\nIWETH| | External:\l\ \ \ \  deposit()\l\ \ \ \  transfer(to: address, value: uint256): bool\l\ \ \ \  withdraw(uint256)\l\ \ \ \  approve(spender: address, amount: uint256): bool\l}"]
}
subgraph  graph_2 {
label="contracts/interfaces/lib"
13 [label="{\<\<Library\>\>\nAddress| | Internal:\l\ \ \ \ functionCallWithValue(target: address, data: bytes, value: uint256, errorMessage: string): bytes\l\ \ \ \ isContract(account: address): bool\l\ \ \ \ functionCall(target: address, data: bytes): bytes\l\ \ \ \ functionCall(target: address, data: bytes, errorMessage: string): bytes\l\ \ \ \ functionCallWithValue(target: address, data: bytes, value: uint256): bytes\l\ \ \ \ sendValue(recipient: address, amount: uint256)\l\ \ \ \ functionStaticCall(target: address, data: bytes): bytes\l\ \ \ \ functionStaticCall(target: address, data: bytes, errorMessage: string): bytes\l\ \ \ \ functionDelegateCall(target: address, data: bytes): bytes\l\ \ \ \ functionDelegateCall(target: address, data: bytes, errorMessage: string): bytes\l\ \ \ \ verifyCallResult(success: bool, returndata: bytes, errorMessage: string): bytes\l}"]
14 [label="{\<\<Library\>\>\nSafeERC20| | Private:\l\ \ \ \ _callOptionalReturn(token: IERC20, data: bytes)\lInternal:\l\ \ \ \ safeTransfer(token: IERC20, to: address, value: uint256)\l\ \ \ \ safeTransferFrom(token: IERC20, from: address, to: address, value: uint256)\l\ \ \ \ safeApprove(token: IERC20, spender: address, value: uint256)\l\ \ \ \ safeIncreaseAllowance(token: IERC20, spender: address, value: uint256)\l}"]
15 [label="{\<\<Library\>\>\nUtils| | }"]
"15struct0" [label="{\<\<struct\>\>\nSellData|fromToken: address\lfromAmount: uint256\ltoAmount: uint256\lexpectedAmount: uint256\lbeneficiary: address\lpath: Utils.Path[]\lpartner: address\lfeePercent: uint256\lpermit: bytes\ldeadline: uint256\luuid: bytes16\l}"]
"15struct0" -> 15 [arrowhead=diamond, weight=3]
"15struct1" [label="{\<\<struct\>\>\nMegaSwapSellData|fromToken: address\lfromAmount: uint256\ltoAmount: uint256\lexpectedAmount: uint256\lbeneficiary: address\lpath: Utils.MegaSwapPath[]\lpartner: address\lfeePercent: uint256\lpermit: bytes\ldeadline: uint256\luuid: bytes16\l}"]
"15struct1" -> 15 [arrowhead=diamond, weight=3]
"15struct2" [label="{\<\<struct\>\>\nSimpleData|fromToken: address\ltoToken: address\lfromAmount: uint256\ltoAmount: uint256\lexpectedAmount: uint256\lcallees: address[]\lexchangeData: bytes\lstartIndexes: uint256[]\lvalues: uint256[]\lbeneficiary: address\lpartner: address\lfeePercent: uint256\lpermit: bytes\ldeadline: uint256\luuid: bytes16\l}"]
"15struct2" -> 15 [arrowhead=diamond, weight=3]
"15struct3" [label="{\<\<struct\>\>\nAdapter|adapter: address\lpercent: uint256\lnetworkFee: uint256\lroute: Route[]\l}"]
"15struct3" -> 15 [arrowhead=diamond, weight=3]
"15struct4" [label="{\<\<struct\>\>\nRoute|index: uint256\ltargetExchange: address\lpercent: uint\lpayload: bytes\lnetworkFee: uint256\l}"]
"15struct4" -> 15 [arrowhead=diamond, weight=3]
"15struct5" [label="{\<\<struct\>\>\nMegaSwapPath|fromAmountPercent: uint256\lpath: Path[]\l}"]
"15struct5" -> 15 [arrowhead=diamond, weight=3]
"15struct6" [label="{\<\<struct\>\>\nPath|to: address\ltotalNetworkFee: uint256\ladapters: Adapter[]\l}"]
"15struct6" -> 15 [arrowhead=diamond, weight=3]
}
0 -> 7 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
1 -> 0 [arrowhead=empty, arrowsize=3, weight=4, ]
3 -> 10 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
3 -> 14 [style=dashed, ]
3 -> 8 [style=dashed, ]
3 -> 7 [style=dashed, ]
3 -> 15 [style=dashed, ]
3 -> 6 [style=dashed, ]
3 -> 9 [style=dashed, ]
3 -> 12 [style=dashed, ]
4 -> 1 [style=dashed, ]
4 -> 3 [style=dashed, ]
5 -> 0 [arrowhead=empty, arrowsize=3, weight=4, ]
7 -> 8 [style=dashed, arrowhead=empty, arrowsize=3, weight=3, ]
9 -> 15 [style=dashed, ]
9 -> 8 [style=dashed, ]
14 -> 13 [style=dashed, ]
14 -> 8 [style=dashed, ]
}